scalar IsoDate
scalar IsoDateTime
scalar IsoTime

type Query {
  getLoans: [Loan!]!
  getLoan(loanId: ID!, effectiveDateTime: IsoDateTime!): Loan
  getLoanVersions(loanId: ID!): [Loan!]!
}

type Loan {
  id: String!
  name: String!
  startAt: IsoDateTime!
  paymentsPerYear: Int!
  paymentAmount: Float!
  principal: Float!
  extraPayment: Float!
  rate: Float!
  effectiveDateTimeRange: EffectiveDateTimeRange!
  completedPayments: [Payment!]!
  remainingPayments: [Payment!]!
}

type EffectiveDateTimeRange {
  start: IsoDateTime!
  end: IsoDateTime
}

input EffectiveDateTimeRangeInput {
  start: IsoDateTime!
  end: IsoDateTime
}

type Payment {
  id: String!
  forLoan: Loan!
  principalPayment: Float!
  interestPayment: Float!
  totalPayment: Float!
  remainingPrincipal: Float!
  date: IsoDate!
}

type Mutation {
  makePayment(
    loanId: ID!
    paymentAmount: Float!
    effectiveDateTime: IsoDateTime!
  ): Loan
  deletePayment(paymentId: ID!): Loan
  updateInterestRateForLoanBetween(
    loanId: ID! 
    rate: Float!
    effectiveStarting: IsoDateTime!): Loan
}
